// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Server.ApiService.Common;
using System;

namespace Server.ApiService.Migrations
{
    [DbContext(typeof(NocDbContext))]
    [Migration("20180410144133_ScondMigration")]
    partial class ScondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.ApiService.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Server.ApiService.Models.Customer", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(11);

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasMaxLength(255);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Server.ApiService.Models.InboundReceipt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acceptor")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Deliveryman")
                        .HasMaxLength(50);

                    b.Property<string>("HandlerName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("StaffId");

                    b.Property<float>("Total");

                    b.Property<string>("VendorId");

                    b.Property<int>("WarehouseId");

                    b.Property<string>("WaybillNo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InboundReceipts");
                });

            modelBuilder.Entity("Server.ApiService.Models.InboundReceiptItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("Index");

                    b.Property<int>("Num");

                    b.Property<float>("Price");

                    b.Property<string>("ProducingLocation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProductId");

                    b.Property<string>("StoreCell")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("InboundReceiptItems");
                });

            modelBuilder.Entity("Server.ApiService.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookInventory");

                    b.Property<int>("CategoryId");

                    b.Property<float>("CostPrice");

                    b.Property<int>("ProductId");

                    b.Property<int>("RealInventory");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Server.ApiService.Models.InventoryWarehouseCell", b =>
                {
                    b.Property<int>("InventoryId");

                    b.Property<int>("WarehouseCellId");

                    b.HasKey("InventoryId", "WarehouseCellId");

                    b.HasIndex("WarehouseCellId");

                    b.ToTable("Inventory_WarehouseCells");
                });

            modelBuilder.Entity("Server.ApiService.Models.OutboundReceipt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acceptor")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Deliveryman")
                        .HasMaxLength(50);

                    b.Property<string>("HandlerName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("StaffId");

                    b.Property<float>("Total");

                    b.Property<int>("WarehouseId");

                    b.Property<string>("WaybillNo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OutboundReceipts");
                });

            modelBuilder.Entity("Server.ApiService.Models.OutboundReceiptItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("Index");

                    b.Property<int>("Num");

                    b.Property<float>("Price");

                    b.Property<string>("ProducingLocation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProductId");

                    b.Property<string>("StoreCell")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("OutboundReceiptItems");
                });

            modelBuilder.Entity("Server.ApiService.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("SellPrice");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Server.ApiService.Models.Staff", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValueSql("0");

                    b.Property<string>("QQNumber")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Remarks")
                        .HasMaxLength(255);

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId")
                        .IsUnique()
                        .HasFilter("[UserInfoId] IS NOT NULL");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Server.ApiService.Models.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Server.ApiService.Models.Vendor", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(11);

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasMaxLength(255);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Server.ApiService.Models.VendorProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<string>("VendorId");

                    b.HasKey("ProductId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("Vendor_Products");
                });

            modelBuilder.Entity("Server.ApiService.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255);

                    b.Property<string>("StaffId");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Server.ApiService.Models.WarehouseCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CellName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("RemainderVolume")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Volume");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseCells");
                });

            modelBuilder.Entity("Server.ApiService.Models.InboundReceipt", b =>
                {
                    b.HasOne("Server.ApiService.Models.Staff", "Staff")
                        .WithMany("InboundReceipts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Vendor", "Vendor")
                        .WithMany("InboundReceipts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Warehouse", "Warehouse")
                        .WithMany("InboundReceipts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.InboundReceiptItem", b =>
                {
                    b.HasOne("Server.ApiService.Models.Category", "Category")
                        .WithMany("InboundReceiptItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Product", "Product")
                        .WithMany("InboundReceiptItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.Inventory", b =>
                {
                    b.HasOne("Server.ApiService.Models.Category", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.InventoryWarehouseCell", b =>
                {
                    b.HasOne("Server.ApiService.Models.Inventory", "Inventory")
                        .WithMany("InventoryWarehouseCells")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.WarehouseCell", "WarehouseCell")
                        .WithMany("InventoryWarehouseCells")
                        .HasForeignKey("WarehouseCellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.ApiService.Models.OutboundReceipt", b =>
                {
                    b.HasOne("Server.ApiService.Models.Customer", "Customer")
                        .WithMany("OutboundReceipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Staff", "Staff")
                        .WithMany("OutboundReceipts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Warehouse", "Warehouse")
                        .WithMany("OutboundReceipts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.OutboundReceiptItem", b =>
                {
                    b.HasOne("Server.ApiService.Models.Category", "Category")
                        .WithMany("OutboundReceiptItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Product", "Product")
                        .WithMany("OutboundReceiptItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.Product", b =>
                {
                    b.HasOne("Server.ApiService.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.Staff", b =>
                {
                    b.HasOne("Server.ApiService.Models.UserInfo", "UserInfo")
                        .WithOne("Staff")
                        .HasForeignKey("Server.ApiService.Models.Staff", "UserInfoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.VendorProduct", b =>
                {
                    b.HasOne("Server.ApiService.Models.Product", "Product")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.ApiService.Models.Vendor", "Vendor")
                        .WithMany("VendorProducts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.Warehouse", b =>
                {
                    b.HasOne("Server.ApiService.Models.Staff", "Staff")
                        .WithMany("Warehouses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.ApiService.Models.WarehouseCell", b =>
                {
                    b.HasOne("Server.ApiService.Models.Warehouse", "Warehouse")
                        .WithMany("Cells")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
